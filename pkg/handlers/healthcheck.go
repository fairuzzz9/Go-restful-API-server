package handlers

import (
	"go-skeleton-rest-app/pkg/http/responses"
	"net/http"

	"log"

	"github.com/labstack/echo/v4"
)

// For application healthcheck purpose. DO NOT MODIFY OR REMOVE THIS!

// HealthCheck godoc
// @Summary Show the status of server.
// @Description get the status of server.
// @Tags root
// @Accept */*
// @Produce json
// @Param P-Request-Id header string false "Request ID generated by client"
// @Success 200 {object} models.StandardJSONResponse
// @Router /healthcheck [get]
func HealthCheck(c echo.Context) error {

	serverTraceID := c.Response().Header().Get(echo.HeaderXRequestID)

	// uncomment these lines to pass context to child function
	//ctx := c.Request().Context()
	//ctx = contextkeys.SetContextValue(ctx, contextkeys.CONTEXT_KEY_SERVER_TRACE_ID, serverTraceID)
	//ctx = contextkeys.SetContextValue(ctx, contextkeys.CONTEXT_KEY_CLIENT_REQUEST_ID, clientRequestID)

	log.Println("healthcheck")
	log.Println("server trace ID : " + serverTraceID)

	// reply with SuccessCode
	reply, err := responses.GetReponseMessageByCode(responses.SuccessCode)

	if err != nil {

		// override the reply message with the error message
		reply.Message = "GetReponseMessageByCode(responses.SuccessCode) error : " + err.Error()

		c.Response().WriteHeader(http.StatusInternalServerError)
		return c.JSON(http.StatusInternalServerError, reply)
	}

	// override the success message
	reply.Message = reply.Message + ". I'm ok."

	c.Response().WriteHeader(http.StatusOK)
	return c.JSON(http.StatusOK, reply)
}
